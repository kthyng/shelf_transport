'''
Plot coastal vulnerability along the coast for marine pollution bulletin paper.
'''

import matplotlib as mpl
mpl.use("Agg") # set matplotlib to use the backend that does not require a windowing system
import numpy as np
import os
import netCDF4 as netCDF
import pdb
import matplotlib.pyplot as plt
import tracpy
import tracpy.plotting
import tracpy.calcs
from datetime import datetime, timedelta
import glob
import op
from matplotlib.mlab import find
from matplotlib import ticker, colors, cbook
import calendar
import matplotlib.patches as Patches
import matplotlib.cm as cm
from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes, mark_inset
from collections import defaultdict

mpl.rcParams.update({'font.size': 14})
mpl.rcParams['font.sans-serif'] = 'Arev Sans, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Helvetica, Avant Garde, sans-serif'
mpl.rcParams['mathtext.fontset'] = 'custom'
mpl.rcParams['mathtext.cal'] = 'cursive'
mpl.rcParams['mathtext.rm'] = 'sans'
mpl.rcParams['mathtext.tt'] = 'monospace'
mpl.rcParams['mathtext.it'] = 'sans:italic'
mpl.rcParams['mathtext.bf'] = 'sans:bold'
mpl.rcParams['mathtext.sf'] = 'sans'
mpl.rcParams['mathtext.fallback_to_cm'] = 'True'


# # Files to loop over
# Files = glob.glob('calcs/coastconn/likelihood/hist-20??-0?.npz')

# # Paths for distance calculation
# pathsxy = np.load('calcs/coastpaths.npz')['pathsxy']

# # How many advection days? Choose index from array([ 3,  5, 10, 15, 20, 30])
# days = np.array([ 3,  5, 10, 15, 20, 30])
# idays = 5

# # distance along the coast boxes
# dist = np.zeros(len(pathsxy))
# verts0 = pathsxy[0].vertices
# for i, path in enumerate(pathsxy):
#     verts1 = path.vertices
#     dist[i:] += np.sqrt((verts1[0,0]-verts0[0,0])**2+(verts1[0,1]-verts0[0,1])**2)
#     verts0 = verts1.copy()
# dist /= 1000 # convert to km

# fig = plt.figure(figsize=(12,6))
# ax = fig.add_subplot(111)

# numfilestotalW = 0; numfilestotalS = 0
# for File in Files:

#     # Load in vulnerability calculations
#     d = np.load(File)
#     ndbox = d['ndbox']
#     numfiles = d['numfiles']
#     d.close()

#     if ('-01' in File) or ('-02' in File):
#         # Add to plot (30 days advection time)
#         ax.plot(dist, ndbox[idays,:]/numfiles/days[idays], '-', color='b', alpha=0.4, lw=1)
#         # keep running sum of total simulation days used
#         numfilestotalW += numfiles

#     elif ('-07' in File) or ('-08' in File):
#         ax.plot(dist, ndbox[idays,:]/numfiles/days[idays], '-', color='orange', alpha=0.4, lw=1)
#         numfilestotalS += numfiles


# # Add overall seasonal
# d = np.load('calcs/coastconn/likelihood/hist-seasonal-all.npz')
# ndbox = d['ndbox']
# d.close()
# ax.plot(dist, ndbox[0,idays,:]/numfilestotalW/days[idays], '-', color='b', lw=4, mec='none') # winter
# ax.plot(dist, ndbox[1,idays,:]/numfilestotalS/days[idays], '-', color='orange', lw=4, mec='none') # summer

# # add details
# ax.set_xlabel('Along-coast distance [km]')
# ax.set_ylabel('Vulnerability [Number of drifters per day]')
# ax.set_xlim(dist.min(), dist.max())

# plt.show()




# Try this instead
# Files to loop over
Files = glob.glob('calcs/coastconn/likelihood/hist-20??-0?.npz')

# Paths for distance calculation
pathsxy = np.load('calcs/coastpaths.npz')['pathsxy']

# How many advection days? Choose index from array([ 3,  5, 10, 15, 20, 30])
days = np.array([ 3,  5, 10, 15, 20, 30])
# idays = 5
alphasS = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5]
# alphasS = [1.0, 0.8, 0.7, 0.6, 0.5, 0.4]
# alphasW = alphasS
alphasW = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3]

# so that darker is more dsimulation per advection day
alphasS = alphasS[::-1]
alphasW = alphasW[::-1]

# distance along the coast boxes
dist = np.zeros(len(pathsxy))
verts0 = pathsxy[0].vertices
for i, path in enumerate(pathsxy):
    verts1 = path.vertices
    dist[i:] += np.sqrt((verts1[0,0]-verts0[0,0])**2+(verts1[0,1]-verts0[0,1])**2)
    verts0 = verts1.copy()
dist /= 1000 # convert to km

numfilestotalW = 0; numfilestotalS = 0

for File in Files:

    # Load in vulnerability calculations
    d = np.load(File)
    ndbox = d['ndbox']
    numfiles = d['numfiles']
    d.close()

    if ('-01' in File) or ('-02' in File):
#         # Add to plot (30 days advection time)
#         ax.plot(dist, ndbox[i,:]/numfiles/days[i], '-', color='b', alpha=0.4, lw=1)
        # keep running sum of total simulation days used
        numfilestotalW += numfiles

    elif ('-07' in File) or ('-08' in File):
#         ax.plot(dist, ndbox[i,:]/numfiles/days[i], '-', color='orange', alpha=0.4, lw=1)
        numfilestotalS += numfiles

fig = plt.figure(figsize=(15,9))
ax = fig.add_subplot(111)

for i, day in enumerate(days):

    # Add overall seasonal Summer
    d = np.load('calcs/coastconn/likelihood/hist-seasonal-all.npz')
    ndbox = d['ndbox']
    d.close()
    ax.plot(dist, ndbox[1,i,:]/numfilestotalS/days[i], '-', color='orange', lw=4, alpha=alphasS[i], zorder=1) # summer

    # Add overall seasonal Winter
    d = np.load('calcs/coastconn/likelihood/hist-seasonal-all.npz')
    ndbox = d['ndbox']
    d.close()
    ax.plot(dist, ndbox[0,i,:]/numfilestotalW/days[i], '--', color='b', lw=4, alpha=alphasW[i], zorder=2) # winter

    if i==0:
        # add details
        ax.set_xlabel('Along-coast distance [km]')
        ax.set_ylabel('Vulnerability [Number of drifters per simulation per advection day]')
        ax.set_xlim(dist.min(), dist.max())
        ax.set_ylim(0, 205)
        ax.text(0.62, 0.95, 'Summer', color='orange', transform=ax.transAxes, fontsize=18)
        ax.text(0.73, 0.95, 'Winter', color='b', transform=ax.transAxes, fontsize=18)

    if day == 3:
        # summer
        ax.plot([0.63, 0.67], [0.93, 0.93], '-', lw=4, color='orange', transform=ax.transAxes, alpha=0.5)
        ax.text(0.68, 0.92, '3', color='orange', alpha=0.5, transform=ax.transAxes)
        # winter
        ax.plot([0.73, 0.78], [0.93, 0.93], '--', lw=4, color='b', transform=ax.transAxes, alpha=0.3)
        ax.text(0.79, 0.92, '3', color='b', alpha=0.3, transform=ax.transAxes)
    if day == 5:
        # summer
        ax.plot([0.63, 0.67], [0.90, 0.90], '-', lw=4, color='orange', transform=ax.transAxes, alpha=0.6)
        ax.text(0.68, 0.89, '5', color='orange', alpha=0.6, transform=ax.transAxes)
        # winter
        ax.plot([0.73, 0.78], [0.90, 0.90], '--', lw=4, color='b', transform=ax.transAxes, alpha=0.4)
        ax.text(0.79, 0.89, '5', color='b', alpha=0.4, transform=ax.transAxes)
    if day == 10:
        # summer
        ax.plot([0.63, 0.67], [0.87, 0.87], '-', lw=4, color='orange', transform=ax.transAxes, alpha=0.7)
        ax.text(0.68, 0.86, '10', color='orange', alpha=0.7, transform=ax.transAxes)
        # winter
        ax.plot([0.73, 0.78], [0.87, 0.87], '--', lw=4, color='b', transform=ax.transAxes, alpha=0.5)
        ax.text(0.79, 0.86, '10', color='b', alpha=0.5, transform=ax.transAxes)
    if day == 15:
        # summer
        ax.plot([0.63, 0.67], [0.84, 0.84], '-', lw=4, color='orange', transform=ax.transAxes, alpha=0.8)
        ax.text(0.68, 0.83, '15', color='orange', alpha=0.8, transform=ax.transAxes)
        # winter
        ax.plot([0.73, 0.78], [0.84, 0.84], '--', lw=4, color='b', transform=ax.transAxes, alpha=0.6)
        ax.text(0.79, 0.83, '15', color='b', alpha=0.6, transform=ax.transAxes)
    if day == 20:
        # summer
        ax.plot([0.63, 0.67], [0.81, 0.81], '-', lw=4, color='orange', transform=ax.transAxes, alpha=0.9)
        ax.text(0.68, 0.80, '20', color='orange', alpha=0.9, transform=ax.transAxes)
        # winter
        ax.plot([0.73, 0.78], [0.81, 0.81], '--', lw=4, color='b', transform=ax.transAxes, alpha=0.7)
        ax.text(0.79, 0.80, '20', color='b', alpha=0.7, transform=ax.transAxes)
    if day == 30:
        # summer
        ax.plot([0.63, 0.67], [0.78, 0.78], '-', lw=4, color='orange', transform=ax.transAxes, alpha=1.0)
        ax.text(0.68, 0.77, '30', color='orange', alpha=1.0, transform=ax.transAxes)
        # winter
        ax.plot([0.73, 0.78], [0.78, 0.78], '--', lw=4, color='b', transform=ax.transAxes, alpha=0.8)
        ax.text(0.79, 0.77, '30', color='b', alpha=0.8, transform=ax.transAxes)

    plt.show()

    fig.savefig('figures/coastconn/likelihood/vulnerability_day' + str(day) + '.pdf', bbox_inches='tight')
